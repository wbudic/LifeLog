*** LifeLog Requirements ***

 -Web Server (any will do that supports CGI perl execution)
 -SQLite
 -Perl Modules
 -git (git clone https://github.com/wbudic/LifeLog)

 -- Note - Perl and some modules might take time to install
           as their fetched and tested for your computer.



## Install tiny thttpd web server. ##


https://acme.com/software/thttpd/

wget https://acme.com/software/thttpd/thttpd-2.29.tar.gz
tar -xvzf thttpd-2.29.tar.gz
cd thttpd-2.29/
sudo groupadd www
./configure
sudo mkdir /usr/local/man/man1
sudo make
sudo make install

#rm thttpd-2.29.tar.gz
#rm -rf thttpd-2.29

Create an mkdir ~/thttpd_dev directory.

Run server using this config file, where {user} is your home login location.


# This section overrides defaults
dir=/home/{user}/thttpd_dev/htdocs
user={user}
logfile=/home/{user}/thttpd_dev/log/thttpd.log
pidfile=/home/{user}/thttpd_dev/run/thttpd.pid
# This section _documents_ defaults in effect
port=8080
# nosymlink# default = !chroot
# novhost
# nocgipat
# nothrottles
host=0.0.0.0
charset=utf-8
cgipat=**.cgi

After modifying the thttpd.conf
you'll have to modify the startDevWebServer.sh to reflect your setup before running the script.

The full URL to the LifeLog is the following link (if not working try without cgi-bin, and proceed with further installation):
#
#
         http://localhost:8080/cgi-bin/
#
#


## Run using Lightthpd Web Server
Modify the the config file, lighttpd.conf. To suit the path where you pulled the git repository, of LifeLog.
With:
git clone https://github.com/wbudic/LifeLog.git



#Install cpanm to make installing other modules easier (you'll thank us later).
#You need to type these commands into a Terminal emulator (Mac OS X, Win32, Linux)

sudo apt install cpanminus


#Install SQLite
https://www.sqlite.org/download.html


#Development Environment Perl Install

#Developer? Install VSCode, not from flatpack. Use Microsoft site -> https://code.visualstudio.com/
Requirments: G++ and gcc compilers, and Gcc-4.8 GNU Compiler

# Install Perl, properly, don't use the distro provided perl interpreter.
sudo apt install perlbrew
#https://learn.perl.org/installing/unix_linux.html
curl -L http://xrl.us/installperlnix | bash
# Perl compiled based on your hardware infrastructure now, is Very Good.
#Developer? Switch to it, and cpan modules:

#Perlbrew allowes you to switch to newer (securer) patched versions of perl.
#Example bellow builds from a $HOME/dev/perl-5.30.1.tar.gz source code archive
#        a descent perl installation for development on your machine.

perlbrew install ~/dev/perl-5.30.1.tar.gz --thread --multi --64int --64all --no-patchperl --debug
#switch to it in a terminal.
perlbrew use 5.30.1
sudo apt install libperl-critic-perl
#libperl-dev is required for the lang server
sudo apt install libperl-dev
sudo cpan Perl::LanguageServer

NOTICE -> Above Perl installation and modules can take time as they build (compiled) and are tested
          using your computers configuration and hardware for optimal performance.
          The Perl::LanguageServer, can fail in tests, as it development specific, can be ignored.

#Install OpenSSL (Optional)
https://www.openssl.org/
sudo apt install openssl


# LifeLog Required Perl modules.

###
# since 1.8 switched to:
# before was -> sudo cpanm Try::Tiny;
sudo cpan Log::Log4per
sudo cpan Syntax::Keyword::Try

sudo cpan DateTime;
sudo cpan DateTime::Format::Human::Duration
sudo cpan DateTime::Format::SQLite;
sudo cpan Text::CSV;
sudo cpan Number::Bytes::Human;
sudo cpan CGI::Session;
sudo cpan Number/Bytes/Human.pm;
sudo cpan Regexp::Common;
sudo cpan JSON;
sudo cpan Switch;
sudo cpan install IPC::Run

#Install DBI module
sudo cpan DBI;
sudo cpan DBD::SQLite;

#Final Perl Installation Notes

This perl setup might take time and efforts. But, it is worth it.
You get it build and tested professionally, based on your hardware.
Platforms supported, Windows, Unix (all), Mac.

Installing perl as an developer, requires no sudo.
But hence can't run server (system level) like.

If developer and running perlbrew, recommended is to use
cpan to install required modules.

#Upgrade Instructions

To upgrade to newer version of this software requires data migration.
Before installing newer version scripts, perform an data export.

cd /home/{user}/thttpd_dev/dbLifeLog
sqlite3 -csv data_log.db "select * from LOG;" > current_log.csv

##Install LifeLog Independently
cd /home/{user}/
git clone https://github.com/wbudic/LifeLog
mkdir /home/{user}/thttpd_dev/dbLifeLog
chmod +x /home/{user}/thttpd_dev/cgi-bin/*.cgi

Copy from /home/{user}/LifeLog/htdocs/cgi-bin to /home/{user}/thttpd_dev/htdocs/cgi-bin
if doing development. Copy also the /home/{user}/LifeLog/.git to /home/{user}/thttpd_dev/

Access the webserver cgi-bin. http://localhost:8080/cgi-bin/main.cgi
(this might redirect to login.cgi or config.cgi in the future)

##Install LifeLog Dependably (not automatic, manual developer way)
cd /home/{user}/
git clone https://github.com/wbudic/LifeLog
run thttpd with:
cd LifeLog; ./startDevWebServer.sh

##Import CSV Exported File
This requires all CGI working. As it will create a brand new database for you.
Once created you must import the from above example current_log.csv
cd /home/{user}/thttpd_dev/dbLifeLog
see: http://www.sqlitetutorial.net/sqlite-import-csv/

Example (data_dev1_2_log.db would be created as the latest version by the CGI created):
cd /home/{user}/thttpd_dev/dbLifeLog
sqlite3 data_dev1_2_log.db
sqlite> .mode csv
sqlite> .import current_log.csv LOG;
sqlite> select * FROM LOG;
sqlite>.quit

Note exporting/importing of other tables is similar, but not recommended.


#Current Latest Development Branch
git fetch && git checkout dev.1.3


#Install thttpd_dev as an Linux System Service
Not recommended, but the thttpd development environment for LifeLog
can be installed to start on reboot.

sudo cp startDevWebServer.sh  /etc/init.d/

Modify the following to the path of your development environment
where thttpd.conf file is in /etc/init.d/startDevWebServer.sh

Modify line -> cd /home/will/thttpd_dev
vim /etc/init.d/startDevWebServer.sh

Install as service with:
sudo update-rc.d startDevWebServer.sh defaults


#Developer Notes

##Automate GIT Push

vim your ./LifeLog/.git/conf file to include:
 [remote "origin"]
	url = https://{user}:{password}github.com/wbudic/LifeLog.git
  ...
Where {user} and {password} are your git login credentials.
Don't worry, these credentials are not uploaded. And someone must have
access to your computers login to specifically hack to obtain them.

##Troubleshoot Data Problems

To reset factory defaults, for categories and configuration.
You might need to delete data in some tables.
Issue either the bellow statements externally.

sqlite3 data_{alias}_log.db "delete from CAT;"
sqlite3 data_{alias}_log.db "delete from CONFIG;"

Subsequent versions of LifeLog software might require this operation.
You can export and modify your added categories via an CSV file.
Making sure the ID first column across all entries has a unique number.

#Install AUTO_LOGIN
On a personal network or small network, you might prefere to auto login when browsing to the LifeLog,
instead of entering every time user name and password. It makese sense, as you are the only one using it,
don't need that extra security.

Other scenario is that the LifeLog in an Office Environment is accessed by multiple people.,
using same alias and password. Don't need to have any extra security as the alias and password is known.


Modify, in dbLifeLog/main.cnf
Look for <<AUTO_LOGIN<>
And change have your general login credentials. i.e.:
<<AUTO_LOGIN<admin/password_123>

Then login one last time, and enable AUTO_LOGIN at the configuration page.



